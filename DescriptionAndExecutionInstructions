Program Description:


The program takes three inputs from the command line: threads_count, searchspace_size and search_item, in that order. threads_count tells how many threads will be created. searchspace_size tells how large the array to search is. search_item is the item to look for in the array.

The program creates an array of the specified size, initializes the array randomly using threads, and divides the array into chunks to process thread-wise.

After that, one thread is created for each chunk of data, which performs the search and returns its result to the calling thread, which is blocked till all child threads finish executing.

The parent thread then combines the results, prints them on the console, and terminates.

[NOTE: Search array initialization has been randomized because we are focused on the parallelization of the search, and so user input is not necessary in this case. This initialization (done using threads) constitutes the "Problem Formation Time". The following execution of the search via threads constitutes the "Thread execution time".]

-

Program Execution:


1) Open Linux Terminal

2) Navigate to ParallelComputingProject directory root

3) mkdir build

4) cd build

5) cmake ../Src

6) cmake --build .

7) ./Main.out [number_of_threads] [size_of_data_array] [search_item] 
(for example: "./Main.out 25 50000 5"; default values are 1, 1 million, and a random number between 1 to 10)
